name: Auto Review Laravel

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  pull-requests: write
  contents: read

jobs:
  auto-review:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Auto Review Laravel
        uses: actions/github-script@v8
        with:
          script: |
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });

            const reviewComments = [];
            const warnings = [];
            const suggestions = [];

            // üîç Analyses sp√©cifiques
            const analysis = analyzePR(files);
            
            // üìù Construction du message de review
            let reviewBody = '## ü§ñ Auto Review - Laravel/Livewire/Filament\\n\\n';

            if (analysis.hasLivewireChanges && !analysis.hasLivewireTests) {
              warnings.push('**Livewire**: Composants modifi√©s sans tests correspondants');
            }

            if (analysis.hasFilamentChanges && !analysis.hasFilamentTests) {
              warnings.push('**Filament**: Resources/Pages modifi√©es sans tests');
            }

            if (analysis.hasMigrations && !analysis.hasRollback) {
              suggestions.push('V√©rifiez que la migration peut √™tre rollback sans erreurs');
            }

            if (analysis.hasModelChanges && !analysis.hasFactoryUpdates) {
              suggestions.push('Pensez √† mettre √† jour les factories des mod√®les modifi√©s');
            }

            if (analysis.largePR) {
              warnings.push(`PR volumineuse (${analysis.fileCount} fichiers) - Envisagez de la d√©couper`);
            }

            if (analysis.hasEnvExampleUpdates) {
              suggestions.push('N\'oubliez pas de mettre √† jour la documentation des variables d\'environnement');
            }

            // üéØ Ajout des sections au review
            if (warnings.length > 0) {
              reviewBody += '### ‚ö†Ô∏è Points de Vigilance\\n';
              warnings.forEach(warning => reviewBody += `- ${warning}\\n`);
              reviewBody += '\\n';
            }

            if (suggestions.length > 0) {
              reviewBody += '### üí° Suggestions\\n';
              suggestions.forEach(suggestion => reviewBody += `- ${suggestion}\\n`);
              reviewBody += '\\n';
            }

            if (analysis.positiveAspects.length > 0) {
              reviewBody += '### ‚úÖ Points Positifs\\n';
              analysis.positiveAspects.forEach(point => reviewBody += `- ${point}\\n`);
            }

            // üö® D√©terminer le statut de la review
            let event = 'COMMENT';
            if (warnings.length > 2 || analysis.criticalIssues.length > 0) {
              event = 'REQUEST_CHANGES';
            } else if (warnings.length === 0 && suggestions.length === 0) {
              reviewBody += '\\nüéâ Aucun probl√®me d√©tect√© automatiquement!';
            }

            // üì§ Poster la review
            if (reviewBody.length > 0) {
              await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                body: reviewBody,
                event: event
              });
            }

            // üîç Fonction d'analyse
            function analyzePR(files) {
              const result = {
                fileCount: files.length,
                hasLivewireChanges: false,
                hasLivewireTests: false,
                hasFilamentChanges: false,
                hasFilamentTests: false,
                hasMigrations: false,
                hasRollback: false,
                hasModelChanges: false,
                hasFactoryUpdates: false,
                hasEnvExampleUpdates: false,
                largePR: files.length > 10,
                positiveAspects: [],
                criticalIssues: []
              };

              files.forEach(file => {
                const filename = file.filename;
                const status = file.status;

                // Livewire
                if (filename.includes('app/Livewire/')) {
                  result.hasLivewireChanges = true;
                  if (filename.includes('Test.php')) {
                    result.hasLivewireTests = true;
                  }
                }

                // Filament
                if (filename.includes('app/Filament/')) {
                  result.hasFilamentChanges = true;
                  if (filename.includes('Test.php')) {
                    result.hasFilamentTests = true;
                  }
                }

                // Migrations
                if (filename.includes('migrations/')) {
                  result.hasMigrations = true;
                  if (filename.includes('down')) {
                    result.hasRollback = true;
                  }
                }

                // Models
                if (filename.includes('app/Models/')) {
                  result.hasModelChanges = true;
                }

                // Factories
                if (filename.includes('database/factories/')) {
                  result.hasFactoryUpdates = true;
                }

                // Environment
                if (filename.includes('.env.example')) {
                  result.hasEnvExampleUpdates = true;
                }

                // Tests g√©n√©raux
                if (filename.includes('tests/') && filename.includes('Test.php')) {
                  result.positiveAspects.push('Tests inclus - Excellent!');
                }

                // V√©rifications de s√©curit√©
                if (filename.includes('config/') && status !== 'modified') {
                  result.criticalIssues.push('Modification de fichier de configuration d√©tect√©e');
                }
              });

              // Logique suppl√©mentaire
              if (result.hasLivewireChanges && result.hasLivewireTests) {
                result.positiveAspects.push('Tests Livewire inclus - Parfait!');
              }

              if (result.hasFilamentChanges && result.hasFilamentTests) {
                result.positiveAspects.push('Tests Filament inclus - Excellent!');
              }

              return result;
            }